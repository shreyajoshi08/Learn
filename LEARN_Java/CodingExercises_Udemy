

import com.sun.jdi.PathSearchingVirtualMachine;

//Coding Exercise
public class PositiveNegativeZero {

    public static void main(String[] args) {
        //checkNumber(4);
        printConversion(1.5);
    }

    public static void checkNumber(int number){
        if (number >0){
            System.out.println("positive");
        } else if (number <0){
            System.out.println("negative");
        }else {
            System.out.println("zeros");
        }
    }

    public static long toMilesPerHour(double kilometersPerHour) {
        long value = 0;
        if (kilometersPerHour < 0){
            value = -1;
            return value;
        }else{
            value = Math.round (kilometersPerHour/1.609);
            return value;
        }
    }

    public static void printConversion(double kilometersPerHour) {

        if (kilometersPerHour < 0){
            System.out.println("Invalid");
        }else{
            long milesPerHour = toMilesPerHour(kilometersPerHour);
            System.out.println(kilometersPerHour +" km/h = "+ milesPerHour+" mi/h");
        }

    }
    
     public static void printMegaBytesAndKiloBytes ( int kiloBytes){
     if (kiloBytes<0){
         System.out.println("Invalid Value");
     }
     else{
         int kbs = kiloBytes%1024;
         int megabytes = kiloBytes/1024;
         
         System.out.println(kiloBytes + " KB = " + megabytes + " MB and " + kbs + " KB");
     }
     
     
 }
 public static boolean shouldWakeUp(boolean barking, int hourOfDay){
        boolean wakeUp = false;
        if (hourOfDay >= 0 && hourOfDay <=23){
            if ((hourOfDay<8 || hourOfDay>22) && barking){
            return true;
            } 
            else
            return false;
        }
        else{
            return false;
        } 
    }

public static boolean isLeapYear( int year){
        
        if( year >= 1 && year <= 9999){
            
            if( year % 4 == 0 && year %2 == 0){
            
                if( year % 100 == 0 && year %2 == 0){
                
                     if( year % 400 == 0 && year %2 == 0){
                         return true;  
                         
                    }else return false;
                    
                }else return true;
                
                
            }
             
            else{
                return false;
            }
            
        } 
        else
        return false;
        
    }
  
    public static boolean areEqualByThreeDecimalPlaces( double num1, double num2){
        num1 = (int) (num1 * 1000);
        num2 = (int) (num2 * 1000);
        if ( num1 == num2){
            
            return true;
            
        }else return false;
        
    }
    
    
    public static boolean hasEqualSum (int a, int b, int c){
        int sum = a+b;
        if(sum==c){
            return true;
        } else return false;
    }

   public static boolean hasTeen(int a, int b, int c){
      if((a >= 13 && a <= 19)||(b >= 13 && b <= 19)||(c >= 13 && c <= 19)){
          return true;
      } else return false;
  }
  
  public static boolean isTeen(int d){
      if(d >= 13 && d <= 19){
          return true;
      }else return false;
  }
}
****************************************************************************************
//Exercise 9
public class AreaCalculator {
    public static double area(double radius){
        if(radius<0){
            return -1.0;
        }
        else {
            double area_of_circle = (Math.PI)*radius*radius;
            return area_of_circle;
        }
    }
    
    public static double area(double x, double y){
        if(x <0 || y<0){
           return -1.0;
        }
        else{
            
            double area_of_rect = x*y;
            return area_of_rect;
        }
    }
}
****************************************************************************************
//Exercise 10
public class MinutesToYearsDaysCalculator {
    
    public static void printYearsAndDays(long minutes){
        
        if(minutes < 0){
            System.out.println("Invalid Value");
        }
        else{
            
           long years = minutes/60/24/365;
           long days = (minutes/60/24)%365;
           System.out.println(minutes+ " min = "+ years + " y and "+ days+ " d");
            }
        }
        
    }
    
********************************************************************************************
//Exercise 11
public class IntEqualityPrinter {
    
    public static void printEqual(int a, int b, int c){
        
        if( a< 0 || b<0 || c<0){
            System.out.println("Invalid Value");
        }
        else if( a==b && b==c && c==a){
            System.out.println("All numbers are equal");
        }
        else if(a!=b && b!=c && c!=a){
            System.out.println("All numbers are different");
        }
        else {
            System.out.println("Neither all are equal or different");
        }
        
    }
    
}
********************************************************************************************
//Exercise 12
public class PlayingCat {
    
    public static boolean isCatPlaying(boolean summer, int temperature){
        
        if ( summer == false && temperature >= 25 && temperature <= 35){
            return true;
        }
        else if( summer == true && temperature >= 25 && temperature <= 45){
            return true;
        }
        else return false;
        
    }
    
    ****************************************************************************************
    //Exercise 14
    public class NumberOfDaysInMonth {
    public static boolean isLeapYear(int year){
        if( year >= 1 && year <= 9999){
            
            if( year % 4 == 0 && year %2 == 0){
            
                if( year % 100 == 0 && year %2 == 0){
                
                     if( year % 400 == 0 && year %2 == 0){
                         return true;  
                         
                    }else return false;
                    
                }else return true;
                
                
            }
             
            else{
                return false;
            }
            
        } 
        else
        return false;
    }
    
    public static int getDaysInMonth(int month, int year){
        boolean flag = isLeapYear(year);
        if( (month<1 || month >12) ||(year<1 || year>9999)){
            return -1;
        }else{
            if(flag){
                 if(month==1||month==3||month==5||month==7||month==8||month==10||month==12)
                    return 31;
                else if(month==2)
                return 29;
                else return 30;
            }
            else{
                if(month==1||month==3||month==5||month==7||month==8||month==10||month==12)
                    return 31;
                else if(month==2)
                return 28;
                else return 30;
        }
    }
}
}
    
}
**********************************************************************************************
//Exercise 15
public class SumOddRange 
{
    public static boolean isOdd(int i){
        if(i<0){
            return false;
        }
        else if(i%2==0){//checking if num is even
                return false;
        }
        else return true;
    }
    
    public static int sumOdd(int start, int end){
        int sum = 0;
        if(start>0 && end>0 && end>=start){
            for(int x = start; x<= end; x++){
                if(isOdd(x)){
                    sum  = sum +x;
                }
            }return sum;
        }
        else return -1; 
    }
}
**********************************************************************************************
//Exercise 16

public class NumberPalindrome {
    public static boolean isPalindrome(int number){
        int og = number;
        int reverse = 0;
        int store;
        
        while(number!=0){
            store = number%10;
            reverse = (reverse*10);
            reverse = reverse+store;
            number  = number /10;
        }
        if(og == reverse) return true;
        else return false;
    }
 
 
}
**********************************************************************************************
//Exercise 17
public class FirstLastDigitSum {
    public static int sumFirstAndLastDigit(int number){
        int first_num, last_num, sum = 0;
        int length = String.valueOf(number).length();
        int divisor = (length/10);
        if (number<0){
            sum= -1;
        }
        else if(number==0){
            sum =  0;
        }
        else{
            while(number>0){
                first_num = number/divisor;
                last_num = number%10;
                sum = first_num+last_num;
            }
        }return sum;
    }
}
**********************************************************************************************
//Exercise 18
public class EvenDigitSum {
    public static int getEvenDigitSum(int number){
        int sum = 0;
        int remainder = 0;
        if(number<0){
            sum = -1;
        }else{
            while(number>0){
                remainder = number%10;
                if (remainder%2==0){
                    sum = sum + remainder;
                }
                number = number/10;
            }
        }
        return sum;
    }
}
**********************************************************************************************
//Exercise 19
public class SharedDigit {
    
    public static boolean hasSharedDigit(int x, int y){
        if((x<10 || x>99) || (y<10 || y>99))
        {
            return false;    
        }
        
        else
        {
            int x1, x2, y1, y2;
            x1= x%10;
            x2= x/10;
            y1=y%10;
            y2=y/10;
            
            if(x1==y1||x1==y2||y1==x2||y2==x2)
            {
                return true;
            }
            else
            {
                return false;
            }       
        }
    }
}
**********************************************************************************************
//Exercise 20
public class LastDigitChecker {
    
    public static boolean hasSameLastDigit(int x, int y, int z){
        
        if((x<10||x>1000)||(y<10||y>1000)||(z<10||z>1000))
        {
            return false;
        }
        
        else
        {
            int x1,y1,z1;
            x1= x%10;
            y1=y%10;
            z1=z%10;
            
            if(x1==y1||x1==z1 || y1==z1)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
    }
    
    public static boolean isValid(int num){
        if(num<10 || num>1000)
        {
            return false;
        }
        else
        {
            return true;
        }
    }
}
**********************************************************************************************
//Exercise 21
public class FactorPrinter {
    
    public static void printFactors(int number){
        if(number<1)
        {
            System.out.println("Invalid Value");
        }
        else
        {
            for(int i=1; i<=number; i++)
            {
                if(number%i == 0)
                {
                    System.out.println(i);
                }
            }
        }
    }   
}

**********************************************************************************************
//Exercise 22
public class GreatestCommonDivisor {
    public static int getGreatestCommonDivisor(int first, int second){
        int max,i,status = 0;
        //to get maximum number amongst both of to run loop.
        if (first>second){
            max = first;
        }
        else max = second;
        
        if(first<10 || second <10){
            status = -1;
            return status;
        }
        //GCD is max common number means remainder = 0;
        else{
            for(i=0;i<=max;i++){
                if(first%i==0 && second%i==0)
                status = i;
            }return status;
        }
    }
}
**********************************************************************************************
//Exercise 23
public class PerfectNumber {
        
    public static boolean isPerfectNumber(int number){
        int sum =0;
        if(number<1)
        {
            return false;
        }
        else
        {
            for(int i=1; i<number; i++)
            {
                if(number%i == 0)
                {
                    sum+=i;
                }
            }
            if(sum==number)
            {
                return true;
            }
            else
            {
                return false;    
            }
        }
    }
 
}
**********************************************************************************************
//Exercise 24
